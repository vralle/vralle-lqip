{"version":3,"sources":["../node_modules/stackblur-canvas/dist/stackblur-es.js","../src/lqip.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","mulTable","shgTable","processCanvasRGB","canvas","topX","topY","width","height","radius","isNaN","imageData","document","getElementById","TypeError","context","getContext","getImageData","e","Error","getImageDataFromCanvas","x","y","i","p","yp","yi","yw","rSum","gSum","bSum","rOutSum","gOutSum","bOutSum","rInSum","gInSum","bInSum","pr","pg","pb","rbs","stackEnd","pixels","data","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","BlurStack","stack","next","stackIn","stackOut","mulSum","shgSum","r","g","b","processImageDataRGB","putImageData","instance","Constructor","_classCallCheck","this","a","lqipHeader","window","GaussholderHeader","lqip","img","lqipData","lqipImg","ctx","onloadLqip","lqipWidth","parseInt","lqipHeight","imgLoaded","remove","style","backgroundImage","backgroundRepeat","backgroundSize","classList","add","length","removeAttribute","removeEventListener","drawImage","canvasRGB","toDataURL","createElement","alpha","Image","addEventListener","src","lqipPart","lqipTotal","atob","header","bytes","Uint8Array","charCodeAt","height_offset","length_offset","buffer","binary","len","byteLength","String","fromCharCode","btoa","arrayBufferToBase64","reconstituteImage","setAttribute","lazyloaded","setTimeout","target","getAttribute","split"],"mappings":"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","sourcesContent":["function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n* StackBlur - a fast almost Gaussian Blur For Canvas\n*\n* In case you find this class useful - especially in commercial projects -\n* I am not totally unhappy for a small donation to my PayPal account\n* mario@quasimondo.de\n*\n* Or support me on flattr:\n* {@link https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript}\n* @module StackBlur\n* @version 0.5\n* @author Mario Klingemann\n* Contact: mario@quasimondo.com\n* Website: {@link http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html}\n* Twitter: @quasimondo\n*\n* @copyright (c) 2010 Mario Klingemann\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\nvar shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n/**\n * @param {string|HTMLImageElement} img\n * @param {string|HTMLCanvasElement} canvas\n * @param {Float} radius\n * @param {boolean} blurAlphaChannel\n * @returns {undefined}\n */\n\nfunction processImage(img, canvas, radius, blurAlphaChannel) {\n  if (typeof img === 'string') {\n    img = document.getElementById(img);\n  }\n\n  if (!img || !('naturalWidth' in img)) {\n    return;\n  }\n\n  var w = img.naturalWidth;\n  var h = img.naturalHeight;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas || !('getContext' in canvas)) {\n    return;\n  }\n\n  canvas.style.width = w + 'px';\n  canvas.style.height = h + 'px';\n  canvas.width = w;\n  canvas.height = h;\n  var context = canvas.getContext('2d');\n  context.clearRect(0, 0, w, h);\n  context.drawImage(img, 0, 0);\n\n  if (isNaN(radius) || radius < 1) {\n    return;\n  }\n\n  if (blurAlphaChannel) {\n    processCanvasRGBA(canvas, 0, 0, w, h, radius);\n  } else {\n    processCanvasRGB(canvas, 0, 0, w, h, radius);\n  }\n}\n/**\n * @param {string|HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @throws {Error|TypeError}\n * @returns {ImageData} See {@link https://html.spec.whatwg.org/multipage/canvas.html#imagedata}\n */\n\n\nfunction getImageDataFromCanvas(canvas, topX, topY, width, height) {\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas || _typeof(canvas) !== 'object' || !('getContext' in canvas)) {\n    throw new TypeError('Expecting canvas with `getContext` method in processCanvasRGB(A) calls!');\n  }\n\n  var context = canvas.getContext('2d');\n\n  try {\n    return context.getImageData(topX, topY, width, height);\n  } catch (e) {\n    throw new Error('unable to access image data: ' + e);\n  }\n}\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {undefined}\n */\n\n\nfunction processCanvasRGBA(canvas, topX, topY, width, height, radius) {\n  if (isNaN(radius) || radius < 1) {\n    return;\n  }\n\n  radius |= 0;\n  var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n  imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);\n  canvas.getContext('2d').putImageData(imageData, topX, topY);\n}\n/**\n * @param {ImageData} imageData\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {ImageData}\n */\n\n\nfunction processImageDataRGBA(imageData, topX, topY, width, height, radius) {\n  var pixels = imageData.data;\n  var x, y, i, p, yp, yi, yw, rSum, gSum, bSum, aSum, rOutSum, gOutSum, bOutSum, aOutSum, rInSum, gInSum, bInSum, aInSum, pr, pg, pb, pa, rbs;\n  var div = 2 * radius + 1; // const w4 = width << 2;\n\n  var widthMinus1 = width - 1;\n  var heightMinus1 = height - 1;\n  var radiusPlus1 = radius + 1;\n  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n  var stackStart = new BlurStack();\n  var stack = stackStart;\n  var stackEnd;\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n\n    if (i === radiusPlus1) {\n      stackEnd = stack;\n    }\n  }\n\n  stack.next = stackStart;\n  var stackIn = null;\n  var stackOut = null;\n  yw = yi = 0;\n  var mulSum = mulTable[radius];\n  var shgSum = shgTable[radius];\n\n  for (y = 0; y < height; y++) {\n    rInSum = gInSum = bInSum = aInSum = rSum = gSum = bSum = aSum = 0;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    aOutSum = radiusPlus1 * (pa = pixels[yi + 3]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    aSum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[p + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[p + 2]) * rbs;\n      aSum += (stack.a = pa = pixels[p + 3]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      aInSum += pa;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi + 3] = pa = aSum * mulSum >> shgSum;\n\n      if (pa !== 0) {\n        pa = 255 / pa;\n        pixels[yi] = (rSum * mulSum >> shgSum) * pa;\n        pixels[yi + 1] = (gSum * mulSum >> shgSum) * pa;\n        pixels[yi + 2] = (bSum * mulSum >> shgSum) * pa;\n      } else {\n        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n      }\n\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      aSum -= aOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      aOutSum -= stackIn.a;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      rInSum += stackIn.r = pixels[p];\n      gInSum += stackIn.g = pixels[p + 1];\n      bInSum += stackIn.b = pixels[p + 2];\n      aInSum += stackIn.a = pixels[p + 3];\n      rSum += rInSum;\n      gSum += gInSum;\n      bSum += bInSum;\n      aSum += aInSum;\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      aOutSum += pa = stackOut.a;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      aInSum -= pa;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    gInSum = bInSum = aInSum = rInSum = gSum = bSum = aSum = rSum = 0;\n    yi = x << 2;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    aOutSum = radiusPlus1 * (pa = pixels[yi + 3]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    aSum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      rSum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      aSum += (stack.a = pa = pixels[yi + 3]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      aInSum += pa;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p + 3] = pa = aSum * mulSum >> shgSum;\n\n      if (pa > 0) {\n        pa = 255 / pa;\n        pixels[p] = (rSum * mulSum >> shgSum) * pa;\n        pixels[p + 1] = (gSum * mulSum >> shgSum) * pa;\n        pixels[p + 2] = (bSum * mulSum >> shgSum) * pa;\n      } else {\n        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n      }\n\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      aSum -= aOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      aOutSum -= stackIn.a;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      rSum += rInSum += stackIn.r = pixels[p];\n      gSum += gInSum += stackIn.g = pixels[p + 1];\n      bSum += bInSum += stackIn.b = pixels[p + 2];\n      aSum += aInSum += stackIn.a = pixels[p + 3];\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      aOutSum += pa = stackOut.a;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      aInSum -= pa;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {undefined}\n */\n\n\nfunction processCanvasRGB(canvas, topX, topY, width, height, radius) {\n  if (isNaN(radius) || radius < 1) {\n    return;\n  }\n\n  radius |= 0;\n  var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n  imageData = processImageDataRGB(imageData, topX, topY, width, height, radius);\n  canvas.getContext('2d').putImageData(imageData, topX, topY);\n}\n/**\n * @param {ImageData} imageData\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {ImageData}\n */\n\n\nfunction processImageDataRGB(imageData, topX, topY, width, height, radius) {\n  var pixels = imageData.data;\n  var x, y, i, p, yp, yi, yw, rSum, gSum, bSum, rOutSum, gOutSum, bOutSum, rInSum, gInSum, bInSum, pr, pg, pb, rbs;\n  var div = 2 * radius + 1; // const w4 = width << 2;\n\n  var widthMinus1 = width - 1;\n  var heightMinus1 = height - 1;\n  var radiusPlus1 = radius + 1;\n  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n  var stackStart = new BlurStack();\n  var stack = stackStart;\n  var stackEnd;\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n\n    if (i === radiusPlus1) {\n      stackEnd = stack;\n    }\n  }\n\n  stack.next = stackStart;\n  var stackIn = null;\n  var stackOut = null;\n  yw = yi = 0;\n  var mulSum = mulTable[radius];\n  var shgSum = shgTable[radius];\n\n  for (y = 0; y < height; y++) {\n    rInSum = gInSum = bInSum = rSum = gSum = bSum = 0;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[p + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[p + 2]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi] = rSum * mulSum >> shgSum;\n      pixels[yi + 1] = gSum * mulSum >> shgSum;\n      pixels[yi + 2] = bSum * mulSum >> shgSum;\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      rInSum += stackIn.r = pixels[p];\n      gInSum += stackIn.g = pixels[p + 1];\n      bInSum += stackIn.b = pixels[p + 2];\n      rSum += rInSum;\n      gSum += gInSum;\n      bSum += bInSum;\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    gInSum = bInSum = rInSum = gSum = bSum = rSum = 0;\n    yi = x << 2;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      rSum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p] = rSum * mulSum >> shgSum;\n      pixels[p + 1] = gSum * mulSum >> shgSum;\n      pixels[p + 2] = bSum * mulSum >> shgSum;\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      rSum += rInSum += stackIn.r = pixels[p];\n      gSum += gInSum += stackIn.g = pixels[p + 1];\n      bSum += bInSum += stackIn.b = pixels[p + 2];\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n\n  return imageData;\n}\n/**\n *\n */\n\n\nvar BlurStack = function BlurStack() {\n  _classCallCheck(this, BlurStack);\n\n  this.r = 0;\n  this.g = 0;\n  this.b = 0;\n  this.a = 0;\n  this.next = null;\n};\n\nexport { BlurStack, processImage as image, processCanvasRGBA as canvasRGBA, processCanvasRGB as canvasRGB, processImageDataRGBA as imageDataRGBA, processImageDataRGB as imageDataRGB };\n","import { canvasRGB } from 'stackblur-canvas';\n\nconst lqipHeader = window.GaussholderHeader;\n\nconst lqip = function( img, lqipData ) {\n  const lqipWidth = parseInt( lqipData[ 1 ], 10 );\n  const lqipHeight = parseInt( lqipData[ 2 ], 10 );\n  let lqipImg;\n  let canvas;\n  let ctx;\n  let imgLoaded = false;\n\n  const createLqip = function() {\n    const arrayBufferToBase64 = function( buffer ) {\n      let binary = '';\n      const bytes = new Uint8Array( buffer );\n      const len = bytes.byteLength;\n      for ( let i = 0; i < len; i++ ) {\n        binary += String.fromCharCode( bytes[ i ] );\n      }\n      return window.btoa( binary );\n    };\n\n    const reconstituteImage = function() {\n      const lqipPart = lqipData[ 0 ];\n      const lqipTotal = atob( lqipHeader.header ) + atob( lqipPart );\n      const bytes = new Uint8Array( lqipTotal.length );\n      for ( let i = 0; i < lqipTotal.length; i++ ) {\n        bytes[ i ] = lqipTotal.charCodeAt( i );\n      }\n\n      // Poke the bits.\n      /* eslint-disable no-bitwise */\n      bytes[ lqipHeader.height_offset ] = ( ( lqipHeight >> 8 ) & 0xFF );\n      bytes[ lqipHeader.height_offset + 1 ] = ( lqipHeight & 0xFF );\n      bytes[ lqipHeader.length_offset ] = ( ( lqipWidth >> 8 ) & 0xFF );\n      bytes[ lqipHeader.length_offset + 1 ] = ( lqipWidth & 0xFF );\n      /* eslint-enable no-bitwise */\n\n      // Back to a full JPEG now.\n      return arrayBufferToBase64( bytes );\n    };\n\n    const onloadLqip = function() {\n      // Render only in viewport.\n      if ( lqipImg ) {\n        lqipImg.removeEventListener( 'load', onloadLqip );\n        lqipImg.removeEventListener( 'error', onloadLqip );\n      }\n      if ( ! imgLoaded ) {\n        img.style.backgroundRepeat = 'no-repeat';\n        img.style.backgroundSize = 'cover';\n        if ( canvas ) {\n          ctx.drawImage( lqipImg, 0, 0, lqipWidth, lqipHeight );\n          canvasRGB( canvas, 0, 0, lqipWidth, lqipHeight, 1 );\n          img.style.backgroundImage = 'url(\"' + canvas.toDataURL() + '\")';\n          img.classList.add( 'guessholder-loaded' );\n        }\n        // Use modern toBlob? toDataURL has performance issues.\n        // if ( canvas.toBlob ) {\n        //   canvas.toBlob( function( blob ) {\n        //     const url = window.URL.createObjectURL( blob );\n        //     // window.URL.revokeObjectURL( url );\n        //     img.style.backgroundImage = 'url(\"' + url + '\")';\n        //   } );\n        // }\n      }\n      img.classList.remove( 'guessholder-loading' );\n    };\n\n    // Use original LQIP sizes and background-size=cover for performance reasons.\n    canvas = document.createElement( 'canvas' );\n    canvas.width = lqipWidth;\n    canvas.height = lqipHeight;\n    ctx = canvas.getContext( '2d', { alpha: false } );\n    // Ensure smoothing is off\n    // ctx.mozImageSmoothingEnabled = false;\n    // ctx.webkitImageSmoothingEnabled = false;\n    // ctx.msImageSmoothingEnabled = false;\n    // ctx.imageSmoothingEnabled = false;\n\n    lqipImg = new Image();\n    lqipImg.addEventListener( 'load', onloadLqip );\n    lqipImg.addEventListener( 'error', onloadLqip );\n    lqipImg.src = 'data:image/jpg;base64,' + reconstituteImage();\n  };\n\n  const remove = function() {\n    lqipImg = null;\n    ctx = null;\n    canvas = null;\n    img.style.backgroundImage = '';\n    img.style.backgroundRepeat = '';\n    img.style.backgroundSize = '';\n    img.classList.add( 'guessholder-removed' );\n    img.classList.remove( 'guessholder-loading' );\n    img.classList.remove( 'guessholder-loaded' );\n    if ( img.style.length == 0 ) {\n      img.removeAttribute( 'style' );\n    }\n  };\n\n  const lazyloaded = function() {\n    img.removeEventListener( 'lazyloaded', lazyloaded );\n    imgLoaded = true;\n    setTimeout( remove, 800 );\n  };\n\n  createLqip();\n\n  // Render original image only in viewport.\n  img.setAttribute( 'data-expand', -1 );\n  img.addEventListener( 'lazyloaded', lazyloaded );\n};\n\nwindow.addEventListener( 'lazybeforeunveil', function( e ) {\n  const img = e.target;\n  const lqipData = img.getAttribute( 'data-gaussholder' );\n  if ( lqipData ) {\n    lqip( img, lqipData.split( ',' ) );\n  }\n} );\n"]}